<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\inverter_ballu_gd.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\inverter_ballu_gd.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Tue Dec 29 18:19:44 2020
<BR><P>
<H3>Maximum Stack Usage =        864 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; loop &rArr; MenuOK() &rArr; PrepareEditParameter &rArr; AcceptParameter &rArr; MenuBack &rArr; DrawMenu &rArr; DrawEditParameter &rArr; DrawTimeEdit() &rArr; DrawTextAligment &rArr; PixelsBase::print(short, short, char*, signed char*) &rArr; PixelsBase::printString(short, short, char*, bool, signed char*) &rArr; PixelsBase::vLine(short, short, short) &rArr; PixelsBase::fill(int, short, short, short, short)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[30]">ADC_CMP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[30]">ADC_CMP_IRQHandler</a><BR>
 <LI><a href="#[1e]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">BusFault_Handler</a><BR>
 <LI><a href="#[1c]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">HardFault_Handler</a><BR>
 <LI><a href="#[1d]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">MemManage_Handler</a><BR>
 <LI><a href="#[1f]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">UsageFault_Handler</a><BR>
 <LI><a href="#[15c]">spi_write_byte</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15c]">spi_write_byte</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[30]">ADC_CMP_IRQHandler</a> from startup_gd32f3x0.o(.text) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[1e]">BusFault_Handler</a> from gd32f3x0_it.o(i.BusFault_Handler) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[40]">CEC_IRQHandler</a> from startup_gd32f3x0.o(.text) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[17]">CustomNext</a> from inverter.o(i.CustomNext) referenced 2 times from inverter.o(.data)
 <LI><a href="#[16]">CustomPrev</a> from inverter.o(i.CustomPrev) referenced 2 times from inverter.o(.data)
 <LI><a href="#[2d]">DMA_Channel0_IRQHandler</a> from startup_gd32f3x0.o(.text) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[2e]">DMA_Channel1_2_IRQHandler</a> from startup_gd32f3x0.o(.text) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[2f]">DMA_Channel3_4_IRQHandler</a> from startup_gd32f3x0.o(.text) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[44]">DMA_Channel5_6_IRQHandler</a> from startup_gd32f3x0.o(.text) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[10]">DateMinus</a> from inverter.o(i.DateMinus) referenced 2 times from inverter.o(.data)
 <LI><a href="#[11]">DatePlus</a> from inverter.o(i.DatePlus) referenced 2 times from inverter.o(.data)
 <LI><a href="#[21]">DebugMon_Handler</a> from gd32f3x0_it.o(i.DebugMon_Handler) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[29]">EXTI0_1_IRQHandler</a> from startup_gd32f3x0.o(.text) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[2a]">EXTI2_3_IRQHandler</a> from startup_gd32f3x0.o(.text) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[2b]">EXTI4_15_IRQHandler</a> from startup_gd32f3x0.o(.text) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[27]">FMC_IRQHandler</a> from startup_gd32f3x0.o(.text) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[1c]">HardFault_Handler</a> from gd32f3x0_it.o(i.HardFault_Handler) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[41]">I2C0_ER_IRQHandler</a> from startup_gd32f3x0.o(.text) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[3a]">I2C0_EV_IRQHandler</a> from startup_gd32f3x0.o(.text) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[42]">I2C1_ER_IRQHandler</a> from startup_gd32f3x0.o(.text) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[3b]">I2C1_EV_IRQHandler</a> from startup_gd32f3x0.o(.text) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[25]">LVD_IRQHandler</a> from startup_gd32f3x0.o(.text) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[1d]">MemManage_Handler</a> from gd32f3x0_it.o(i.MemManage_Handler) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[f]">MenuBack</a> from inverter.o(i.MenuBack) referenced 4 times from inverter.o(.data)
 <LI><a href="#[1b]">NMI_Handler</a> from gd32f3x0_it.o(i.NMI_Handler) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[15]">Off</a> from inverter.o(i.Off) referenced 14 times from inverter.o(.data)
 <LI><a href="#[14]">On</a> from inverter.o(i.On) referenced 14 times from inverter.o(.data)
 <LI><a href="#[22]">PendSV_Handler</a> from gd32f3x0_it.o(i.PendSV_Handler) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[28]">RCU_CTC_IRQHandler</a> from startup_gd32f3x0.o(.text) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[26]">RTC_IRQHandler</a> from gd32f3x0_it.o(i.RTC_IRQHandler) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[1a]">Reset_Handler</a> from startup_gd32f3x0.o(.text) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[3c]">SPI0_IRQHandler</a> from startup_gd32f3x0.o(.text) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[3d]">SPI1_IRQHandler</a> from startup_gd32f3x0.o(.text) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[20]">SVC_Handler</a> from gd32f3x0_it.o(i.SVC_Handler) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[23]">SysTick_Handler</a> from gd32f3x0_it.o(i.SysTick_Handler) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[46]">SystemInit</a> from system_gd32f3x0.o(i.SystemInit) referenced from startup_gd32f3x0.o(.text)
 <LI><a href="#[31]">TIMER0_BRK_UP_TRG_COM_IRQHandler</a> from startup_gd32f3x0.o(.text) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[32]">TIMER0_Channel_IRQHandler</a> from startup_gd32f3x0.o(.text) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[36]">TIMER13_IRQHandler</a> from gd32f3x0_it.o(i.TIMER13_IRQHandler) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[37]">TIMER14_IRQHandler</a> from startup_gd32f3x0.o(.text) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[38]">TIMER15_IRQHandler</a> from startup_gd32f3x0.o(.text) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[39]">TIMER16_IRQHandler</a> from startup_gd32f3x0.o(.text) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[33]">TIMER1_IRQHandler</a> from startup_gd32f3x0.o(.text) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[34]">TIMER2_IRQHandler</a> from startup_gd32f3x0.o(.text) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[35]">TIMER5_DAC_IRQHandler</a> from startup_gd32f3x0.o(.text) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[2c]">TSI_IRQHandler</a> from startup_gd32f3x0.o(.text) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[18]">TempMinus</a> from inverter.o(i.TempMinus) referenced 6 times from inverter.o(.data)
 <LI><a href="#[19]">TempPlus</a> from inverter.o(i.TempPlus) referenced 6 times from inverter.o(.data)
 <LI><a href="#[12]">TimeMinus</a> from inverter.o(i.TimeMinus) referenced 4 times from inverter.o(.data)
 <LI><a href="#[13]">TimePlus</a> from inverter.o(i.TimePlus) referenced 4 times from inverter.o(.data)
 <LI><a href="#[3e]">USART0_IRQHandler</a> from startup_gd32f3x0.o(.text) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[3f]">USART1_IRQHandler</a> from gd32f3x0_it.o(i.USART1_IRQHandler) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[45]">USBFS_IRQHandler</a> from startup_gd32f3x0.o(.text) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[43]">USBFS_WKUP_IRQHandler</a> from startup_gd32f3x0.o(.text) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[1f]">UsageFault_Handler</a> from gd32f3x0_it.o(i.UsageFault_Handler) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[24]">WWDGT_IRQHandler</a> from startup_gd32f3x0.o(.text) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[4b]">__default_new_handler()</a> from arm_newhandler_noexceptions.o(.text) referenced from new.o(i._Znwj)
 <LI><a href="#[4e]">PixelsBase::deviceWriteData(unsigned char, unsigned char)</a> from pixels.o(i._ZN10PixelsBase15deviceWriteDataEhh) referenced from pixels.o(.constdata__ZTV10PixelsBase)
 <LI><a href="#[4f]">PixelsBase::drawRoundRectangleAntialiased(short, short, short, short, short, short, bool)</a> from pixels.o(i._ZN10PixelsBase29drawRoundRectangleAntialiasedEssssssb) referenced from pixels.o(.constdata__ZTV10PixelsBase)
 <LI><a href="#[4f]">PixelsBase::drawRoundRectangleAntialiased(short, short, short, short, short, short, bool)</a> from pixels.o(i._ZN10PixelsBase29drawRoundRectangleAntialiasedEssssssb) referenced from inverter.o(.constdata__ZTV6Pixels)
 <LI><a href="#[4d]">PixelsBase::quickFill(int, short, short, short, short)</a> from pixels.o(i._ZN10PixelsBase9quickFillEissss) referenced from pixels.o(.constdata__ZTV10PixelsBase)
 <LI><a href="#[4c]">PixelsBase::setRegion(short, short, short, short)</a> from pixels.o(i._ZN10PixelsBase9setRegionEssss) referenced from pixels.o(.constdata__ZTV10PixelsBase)
 <LI><a href="#[4a]">[local to arm_exceptions_c]::__default_terminate_handler()</a> from arm_exceptions_globs.o(.text) referenced from arm_exceptions_globs.o(.text)
 <LI><a href="#[52]">Pixels::deviceWriteData(unsigned char, unsigned char)</a> from inverter.o(i._ZN6Pixels15deviceWriteDataEhh) referenced from inverter.o(.constdata__ZTV6Pixels)
 <LI><a href="#[53]">Pixels::init()</a> from inverter.o(i._ZN6Pixels4initEv) referenced from inverter.o(.constdata__ZTV6Pixels)
 <LI><a href="#[51]">Pixels::quickFill(int, short, short, short, short)</a> from inverter.o(i._ZN6Pixels9quickFillEissss) referenced from inverter.o(.constdata__ZTV6Pixels)
 <LI><a href="#[50]">Pixels::setRegion(short, short, short, short)</a> from inverter.o(i._ZN6Pixels9setRegionEssss) referenced from inverter.o(.constdata__ZTV6Pixels)
 <LI><a href="#[54]">Stream::flush()</a> from wifi.o(i._ZN6Stream5flushEv) referenced from wifi.o(.constdata__ZTV6Stream)
 <LI><a href="#[57]">__main</a> from __main.o(!!!main) referenced from startup_gd32f3x0.o(.text)
 <LI><a href="#[55]">__sti___10_inverter_c_ffec7761</a> from inverter.o(i.__sti___10_inverter_c_ffec7761) referenced from inverter.o(.init_array)
 <LI><a href="#[56]">__sti___6_wifi_c_rxcount</a> from wifi.o(i.__sti___6_wifi_c_rxcount) referenced from wifi.o(.init_array)
 <LI><a href="#[49]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[48]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[57]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[59]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[5b]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1a4]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1a5]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1a6]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1a7]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1a8]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[5c]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[78]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[5e]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[1a9]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[68]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[60]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[62]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[1aa]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[1ab]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1ac]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1ad]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1ae]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[64]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[1af]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1b0]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1b1]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[1b2]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[1b3]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[1b4]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1b5]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[1b6]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1b7]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1b8]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[1b9]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1ba]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[1bb]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[1bc]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[1bd]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[6d]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[1be]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[1bf]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[1c0]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[1c1]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[1c2]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[1c3]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[1c4]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[5a]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[1c5]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[65]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[67]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1c6]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[69]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; loop &rArr; MenuOK() &rArr; PrepareEditParameter &rArr; AcceptParameter &rArr; MenuBack &rArr; DrawMenu &rArr; DrawEditParameter &rArr; DrawTimeEdit() &rArr; DrawTextAligment &rArr; PixelsBase::print(short, short, char*, signed char*) &rArr; PixelsBase::printString(short, short, char*, bool, signed char*) &rArr; PixelsBase::vLine(short, short, short) &rArr; PixelsBase::fill(int, short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1c7]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[98]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[6c]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[1c8]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[6e]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[1a]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_gd32f3x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[1c9]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[30]"></a>ADC_CMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f3x0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CMP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CMP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f3x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DMA_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f3x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DMA_Channel1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f3x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DMA_Channel3_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f3x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA_Channel5_6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f3x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f3x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f3x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f3x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f3x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>I2C0_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f3x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>I2C0_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f3x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f3x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f3x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f3x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>RCU_CTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f3x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f3x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f3x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIMER0_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f3x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIMER0_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f3x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIMER14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f3x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIMER15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f3x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIMER16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f3x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f3x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f3x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIMER5_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f3x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TSI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f3x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>USART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f3x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>USBFS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f3x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>USBFS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f3x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>WWDGT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f3x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_gd32f3x0.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[70]"></a>__2sprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawCustomDay(int)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTimeEdit()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawDateEdit()
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startScreen()
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTemperature
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMenu
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawEditParameter
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanTemperature
</UL>

<P><STRONG><a name="[73]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[74]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[72]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[5d]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[76]"></a>__printf</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[13d]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::printString(short, short, char*, bool, signed char*)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::getTextWidth(char*, signed char*)
</UL>

<P><STRONG><a name="[174]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[79]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[1ca]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAllSettings
</UL>

<P><STRONG><a name="[15f]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stream::flush()
</UL>

<P><STRONG><a name="[7d]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[7c]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[7f]"></a>localtime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, localtime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = localtime &rArr; _localtime_r &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcceptParameter
</UL>

<P><STRONG><a name="[81]"></a>mktime</STRONG> (Thumb, 356 bytes, Stack size 40 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mktime &rArr; _tm_carry
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tm_carry
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcceptParameter
</UL>

<P><STRONG><a name="[1cb]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[6]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[83]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[85]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_logf
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[75]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[71]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[48]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[86]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[87]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[5f]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[7a]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[1cc]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1cd]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1ce]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime_r
</UL>

<P><STRONG><a name="[1cf]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1d0]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[80]"></a>_localtime_r</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, localtime_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _localtime_r &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>

<P><STRONG><a name="[1d1]"></a>_n$localtime_r</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, localtime_internal.o(.text), UNUSED)

<P><STRONG><a name="[162]"></a>__rt_new_handler_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_new_handler_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>

<P><STRONG><a name="[84]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[1d2]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[1d3]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[89]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>

<P><STRONG><a name="[8c]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>

<P><STRONG><a name="[4b]"></a>__default_new_handler()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, arm_newhandler_noexceptions.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> new.o(i._Znwj)
</UL>
<P><STRONG><a name="[8d]"></a>std::terminate()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, arm_exceptions_terminate.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[8e]"></a>__cxa_get_globals</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, arm_exceptions_globs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_eh_globals_addr
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[1d4]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[92]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1d5]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[8a]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[90]"></a>__rt_eh_globals_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_eh_globals_addr_intlibspace.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[1d6]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[1d7]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[e]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[2]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[95]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[63]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[97]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[8]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[8f]"></a>abort</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to arm_exceptions_c]::__default_terminate_handler()
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[91]"></a>__ARM_exceptions_buffer_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, arm_exceptions_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[1d8]"></a>__ARM_exceptions_buffer_allocate</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[1d9]"></a>__ARM_exceptions_buffer_free</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[94]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[99]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[96]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[1da]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1db]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1dc]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[9a]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[9c]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[9d]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>

<P><STRONG><a name="[9e]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[9f]"></a>AcceptParameter</STRONG> (Thumb, 1796 bytes, Stack size 48 bytes, inverter.o(i.AcceptParameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = AcceptParameter &rArr; MenuBack &rArr; DrawMenu &rArr; DrawEditParameter &rArr; DrawTimeEdit() &rArr; DrawTextAligment &rArr; PixelsBase::print(short, short, char*, signed char*) &rArr; PixelsBase::printString(short, short, char*, bool, signed char*) &rArr; PixelsBase::vLine(short, short, short) &rArr; PixelsBase::fill(int, short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemTick
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_current_time_get
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_wifi_state
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB::RGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::setFont(const unsigned char*)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::print(short, short, char*, signed char*)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::clear()
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::fillRoundRectangle(short, short, short, short, short)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::getTextLineHeight()
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::getTextWidth(char*, signed char*)
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isValidDate
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCalendarMode
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decToBcd
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::setColor(RGB)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::setBackground(RGB)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFlash()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoOK(int)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAllSettings
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuBack
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuOK()
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareEditParameter
</UL>

<P><STRONG><a name="[1e]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f3x0_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[b5]"></a>CleanTemperature</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, inverter.o(i.CleanTemperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = CleanTemperature &rArr; PixelsBase::cleanText(short, short, char*, signed char*) &rArr; PixelsBase::printString(short, short, char*, bool, signed char*) &rArr; PixelsBase::vLine(short, short, short) &rArr; PixelsBase::fill(int, short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB::RGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::cleanText(short, short, char*, signed char*)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::setFont(const unsigned char*)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::getTextWidth(char*, signed char*)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::setColor(RGB)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_uart_int
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempPlus
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempMinus
</UL>

<P><STRONG><a name="[17]"></a>CustomNext</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, inverter.o(i.CustomNext))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = CustomNext &rArr; DrawCustomDay(int) &rArr; DrawTextAligment &rArr; PixelsBase::print(short, short, char*, signed char*) &rArr; PixelsBase::printString(short, short, char*, bool, signed char*) &rArr; PixelsBase::vLine(short, short, short) &rArr; PixelsBase::fill(int, short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawCustomDay(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> inverter.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>CustomPrev</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, inverter.o(i.CustomPrev))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = CustomPrev &rArr; DrawCustomDay(int) &rArr; DrawTextAligment &rArr; PixelsBase::print(short, short, char*, signed char*) &rArr; PixelsBase::printString(short, short, char*, bool, signed char*) &rArr; PixelsBase::vLine(short, short, short) &rArr; PixelsBase::fill(int, short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawCustomDay(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> inverter.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>DateMinus</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, inverter.o(i.DateMinus))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = DateMinus &rArr; DrawEditParameter &rArr; DrawTimeEdit() &rArr; DrawTextAligment &rArr; PixelsBase::print(short, short, char*, signed char*) &rArr; PixelsBase::printString(short, short, char*, bool, signed char*) &rArr; PixelsBase::vLine(short, short, short) &rArr; PixelsBase::fill(int, short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isValidDate
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawEditParameter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> inverter.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>DatePlus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, inverter.o(i.DatePlus))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = DatePlus &rArr; DrawEditParameter &rArr; DrawTimeEdit() &rArr; DrawTextAligment &rArr; PixelsBase::print(short, short, char*, signed char*) &rArr; PixelsBase::printString(short, short, char*, bool, signed char*) &rArr; PixelsBase::vLine(short, short, short) &rArr; PixelsBase::fill(int, short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isValidDate
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawEditParameter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> inverter.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f3x0_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[b8]"></a>DrawEditParameter</STRONG> (Thumb, 3256 bytes, Stack size 216 bytes, inverter.o(i.DrawEditParameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = DrawEditParameter &rArr; DrawTimeEdit() &rArr; DrawTextAligment &rArr; PixelsBase::print(short, short, char*, signed char*) &rArr; PixelsBase::printString(short, short, char*, bool, signed char*) &rArr; PixelsBase::vLine(short, short, short) &rArr; PixelsBase::fill(int, short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_current_time_get
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB::RGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::setFont(const unsigned char*)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::print(short, short, char*, signed char*)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::clear()
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::sizeCompressedBitmap(short&, short&, const unsigned char*)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::drawCompressedBitmap(short, short, const unsigned char*)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::fillRoundRectangle(short, short, short, short, short)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::getTextLineHeight()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::fillRectangle(short, short, short, short)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::getTextWidth(char*, signed char*)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::setColor(RGB)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::setBackground(RGB)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawLeftRight()
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawCustomDay(int)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTimeEdit()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawDateEdit()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTextAligment
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTemperature
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMenuTitle2
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMenuTitle
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMenuText
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimePlus
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeMinus
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempPlus
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempMinus
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Off
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMenu
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DatePlus
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DateMinus
</UL>

<P><STRONG><a name="[c4]"></a>DrawMainScreen</STRONG> (Thumb, 822 bytes, Stack size 72 bytes, inverter.o(i.DrawMainScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = DrawMainScreen &rArr; DrawTextAligment &rArr; PixelsBase::print(short, short, char*, signed char*) &rArr; PixelsBase::printString(short, short, char*, bool, signed char*) &rArr; PixelsBase::vLine(short, short, short) &rArr; PixelsBase::fill(int, short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB::RGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::setFont(const unsigned char*)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::print(short, short, char*, signed char*)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::clear()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::drawCompressedBitmap(short, short, const unsigned char*)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::fillRectangle(short, short, short, short)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smooth_backlight
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getModeTemperature
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::setColor(RGB)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::setBackground(RGB)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTextAligment
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTemperature
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_uart_int
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_window_func
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unblocked()
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blocked()
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open_window(signed char, unsigned char)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startScreen()
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyPressed()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainScreen()
</UL>

<P><STRONG><a name="[c7]"></a>DrawMenu</STRONG> (Thumb, 1750 bytes, Stack size 72 bytes, inverter.o(i.DrawMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = DrawMenu &rArr; DrawEditParameter &rArr; DrawTimeEdit() &rArr; DrawTextAligment &rArr; PixelsBase::print(short, short, char*, signed char*) &rArr; PixelsBase::printString(short, short, char*, bool, signed char*) &rArr; PixelsBase::vLine(short, short, short) &rArr; PixelsBase::fill(int, short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB::RGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::fillOval(short, short, short, short)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::setFont(const unsigned char*)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::print(short, short, char*, signed char*)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::clear()
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::sizeCompressedBitmap(short&, short&, const unsigned char*)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::drawCompressedBitmap(short, short, const unsigned char*)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::fillRectangle(short, short, short, short)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::getTextWidth(char*, signed char*)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawRoundRect
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::setColor(RGB)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::setBackground(RGB)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawLeftRight()
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTextSelected
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMenuText
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawEditParameter
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMenu()
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuPrev()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuNext()
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuOK()
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuBack
</UL>

<P><STRONG><a name="[bc]"></a>DrawMenuText</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, inverter.o(i.DrawMenuText))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = DrawMenuText &rArr; PixelsBase::print(short, short, char*, signed char*) &rArr; PixelsBase::printString(short, short, char*, bool, signed char*) &rArr; PixelsBase::vLine(short, short, short) &rArr; PixelsBase::fill(int, short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB::RGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::setFont(const unsigned char*)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::print(short, short, char*, signed char*)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::getTextWidth(char*, signed char*)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::setColor(RGB)
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTimeEdit()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawDateEdit()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMenu
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawEditParameter
</UL>

<P><STRONG><a name="[be]"></a>DrawMenuTitle</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, inverter.o(i.DrawMenuTitle))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = DrawMenuTitle &rArr; PixelsBase::print(short, short, char*, signed char*) &rArr; PixelsBase::printString(short, short, char*, bool, signed char*) &rArr; PixelsBase::vLine(short, short, short) &rArr; PixelsBase::fill(int, short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB::RGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::setFont(const unsigned char*)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::print(short, short, char*, signed char*)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::getTextWidth(char*, signed char*)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::setColor(RGB)
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawEditParameter
</UL>

<P><STRONG><a name="[ba]"></a>DrawMenuTitle2</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, inverter.o(i.DrawMenuTitle2))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = DrawMenuTitle2 &rArr; PixelsBase::print(short, short, char*, signed char*) &rArr; PixelsBase::printString(short, short, char*, bool, signed char*) &rArr; PixelsBase::vLine(short, short, short) &rArr; PixelsBase::fill(int, short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB::RGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::setFont(const unsigned char*)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::print(short, short, char*, signed char*)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::getTextWidth(char*, signed char*)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::setColor(RGB)
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawEditParameter
</UL>

<P><STRONG><a name="[bb]"></a>DrawTemperature</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, inverter.o(i.DrawTemperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = DrawTemperature &rArr; PixelsBase::print(short, short, char*, signed char*) &rArr; PixelsBase::printString(short, short, char*, bool, signed char*) &rArr; PixelsBase::vLine(short, short, short) &rArr; PixelsBase::fill(int, short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB::RGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::setFont(const unsigned char*)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::print(short, short, char*, signed char*)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::getTextWidth(char*, signed char*)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::setColor(RGB)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_uart_int
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMainScreen
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawEditParameter
</UL>

<P><STRONG><a name="[bf]"></a>DrawTextAligment</STRONG> (Thumb, 358 bytes, Stack size 96 bytes, inverter.o(i.DrawTextAligment))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = DrawTextAligment &rArr; PixelsBase::print(short, short, char*, signed char*) &rArr; PixelsBase::printString(short, short, char*, bool, signed char*) &rArr; PixelsBase::vLine(short, short, short) &rArr; PixelsBase::fill(int, short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB::RGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::print(short, short, char*, signed char*)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::fillRoundRectangle(short, short, short, short, short)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::getTextLineHeight()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::fillRectangle(short, short, short, short)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::getTextWidth(char*, signed char*)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::setColor(RGB)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::setBackground(RGB)
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawCustomDay(int)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTimeEdit()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawDateEdit()
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startScreen()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMainScreen
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawEditParameter
</UL>

<P><STRONG><a name="[ca]"></a>DrawTextSelected</STRONG> (Thumb, 270 bytes, Stack size 64 bytes, inverter.o(i.DrawTextSelected))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = DrawTextSelected &rArr; PixelsBase::print(short, short, char*, signed char*) &rArr; PixelsBase::printString(short, short, char*, bool, signed char*) &rArr; PixelsBase::vLine(short, short, short) &rArr; PixelsBase::fill(int, short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB::RGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::print(short, short, char*, signed char*)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::getTextLineHeight()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::fillRectangle(short, short, short, short)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::getTextWidth(char*, signed char*)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::setColor(RGB)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::setBackground(RGB)
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMenu
</UL>

<P><STRONG><a name="[cb]"></a>DrawWifi</STRONG> (Thumb, 316 bytes, Stack size 24 bytes, inverter.o(i.DrawWifi))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = DrawWifi &rArr; PixelsBase::drawCompressedBitmap(short, short, const unsigned char*) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemTick
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB::RGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::drawCompressedBitmap(short, short, const unsigned char*)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::fillRectangle(short, short, short, short)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::setColor(RGB)
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[cc]"></a>DrawWindowOpen</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, inverter.o(i.DrawWindowOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = DrawWindowOpen &rArr; PixelsBase::drawCompressedBitmap(short, short, const unsigned char*) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemTick
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::clear()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::drawCompressedBitmap(short, short, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[ae]"></a>GetSystemTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, systick.o(i.GetSystemTick))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClickButton::update()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceON()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoOK(int)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open_window(signed char, unsigned char)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyPressed()
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawWindowOpen
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawWifi
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcceptParameter
</UL>

<P><STRONG><a name="[1c]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f3x0_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>InitTimer</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, inverter.o(i.InitTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = InitTimer &rArr; getCalendarMode &rArr; rtc_current_time_get
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_flag_clear
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_current_time_get
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_alarm_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_alarm_disable
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_alarm_config
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCalendarMode
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_uart_int
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceON()
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcceptParameter
</UL>

<P><STRONG><a name="[1d]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f3x0_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>MenuBack</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, inverter.o(i.MenuBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = MenuBack &rArr; DrawMenu &rArr; DrawEditParameter &rArr; DrawTimeEdit() &rArr; DrawTextAligment &rArr; PixelsBase::print(short, short, char*, signed char*) &rArr; PixelsBase::printString(short, short, char*, bool, signed char*) &rArr; PixelsBase::vLine(short, short, short) &rArr; PixelsBase::fill(int, short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smooth_backlight
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainScreen()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMenu
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcceptParameter
</UL>
<BR>[Address Reference Count : 2]<UL><LI> inverter.o(.data)
<LI> inverter.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f3x0_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>Off</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, inverter.o(i.Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = Off &rArr; DrawEditParameter &rArr; DrawTimeEdit() &rArr; DrawTextAligment &rArr; PixelsBase::print(short, short, char*, signed char*) &rArr; PixelsBase::printString(short, short, char*, bool, signed char*) &rArr; PixelsBase::vLine(short, short, short) &rArr; PixelsBase::fill(int, short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawEditParameter
</UL>
<BR>[Address Reference Count : 5]<UL><LI> inverter.o(.data)
<LI> inverter.o(.data)
<LI> inverter.o(.data)
<LI> inverter.o(.data)
<LI> inverter.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>On</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, inverter.o(i.On))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = On &rArr; DrawEditParameter &rArr; DrawTimeEdit() &rArr; DrawTextAligment &rArr; PixelsBase::print(short, short, char*, signed char*) &rArr; PixelsBase::printString(short, short, char*, bool, signed char*) &rArr; PixelsBase::vLine(short, short, short) &rArr; PixelsBase::fill(int, short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawEditParameter
</UL>
<BR>[Address Reference Count : 5]<UL><LI> inverter.o(.data)
<LI> inverter.o(.data)
<LI> inverter.o(.data)
<LI> inverter.o(.data)
<LI> inverter.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f3x0_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[d2]"></a>PrepareEditParameter</STRONG> (Thumb, 336 bytes, Stack size 24 bytes, inverter.o(i.PrepareEditParameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = PrepareEditParameter &rArr; AcceptParameter &rArr; MenuBack &rArr; DrawMenu &rArr; DrawEditParameter &rArr; DrawTimeEdit() &rArr; DrawTextAligment &rArr; PixelsBase::print(short, short, char*, signed char*) &rArr; PixelsBase::printString(short, short, char*, bool, signed char*) &rArr; PixelsBase::vLine(short, short, short) &rArr; PixelsBase::fill(int, short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_current_time_get
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcdToDec
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcceptParameter
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuOK()
</UL>

<P><STRONG><a name="[26]"></a>RTC_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gd32f3x0_it.o(i.RTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RTC_IRQHandler &rArr; rtc_alarm_callback &rArr; query_settings &rArr; getTemperature &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_flag_get
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_flag_clear
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_alarm_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[b3]"></a>ResetAllSettings</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, inverter.o(i.ResetAllSettings))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = ResetAllSettings &rArr; rtc_init &rArr; rtc_register_sync_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_deinit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcceptParameter
</UL>

<P><STRONG><a name="[20]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f3x0_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SysTick_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gd32f3x0_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_decrement
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTickInc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>SystemInit</STRONG> (Thumb, 286 bytes, Stack size 8 bytes, system_gd32f3x0.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_vector_table_set
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_84m_irc8m
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(.text)
</UL>
<P><STRONG><a name="[d8]"></a>SystemTickInc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, systick.o(i.SystemTickInc))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[36]"></a>TIMER13_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gd32f3x0_it.o(i.TIMER13_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER13_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_get
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Heat_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[dd]"></a>TIMER_Heat_callback</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, inverter.o(i.TIMER_Heat_callback))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER13_IRQHandler
</UL>

<P><STRONG><a name="[18]"></a>TempMinus</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, inverter.o(i.TempMinus))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = TempMinus &rArr; DrawEditParameter &rArr; DrawTimeEdit() &rArr; DrawTextAligment &rArr; PixelsBase::print(short, short, char*, signed char*) &rArr; PixelsBase::printString(short, short, char*, bool, signed char*) &rArr; PixelsBase::vLine(short, short, short) &rArr; PixelsBase::fill(int, short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawEditParameter
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanTemperature
</UL>
<BR>[Address Reference Count : 1]<UL><LI> inverter.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>TempPlus</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, inverter.o(i.TempPlus))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = TempPlus &rArr; DrawEditParameter &rArr; DrawTimeEdit() &rArr; DrawTextAligment &rArr; PixelsBase::print(short, short, char*, signed char*) &rArr; PixelsBase::printString(short, short, char*, bool, signed char*) &rArr; PixelsBase::vLine(short, short, short) &rArr; PixelsBase::fill(int, short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawEditParameter
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanTemperature
</UL>
<BR>[Address Reference Count : 1]<UL><LI> inverter.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>TimeMinus</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, inverter.o(i.TimeMinus))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = TimeMinus &rArr; DrawEditParameter &rArr; DrawTimeEdit() &rArr; DrawTextAligment &rArr; PixelsBase::print(short, short, char*, signed char*) &rArr; PixelsBase::printString(short, short, char*, bool, signed char*) &rArr; PixelsBase::vLine(short, short, short) &rArr; PixelsBase::fill(int, short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawEditParameter
</UL>
<BR>[Address Reference Count : 2]<UL><LI> inverter.o(.data)
<LI> inverter.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>TimePlus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, inverter.o(i.TimePlus))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = TimePlus &rArr; DrawEditParameter &rArr; DrawTimeEdit() &rArr; DrawTextAligment &rArr; PixelsBase::print(short, short, char*, signed char*) &rArr; PixelsBase::printString(short, short, char*, bool, signed char*) &rArr; PixelsBase::vLine(short, short, short) &rArr; PixelsBase::fill(int, short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawEditParameter
</UL>
<BR>[Address Reference Count : 2]<UL><LI> inverter.o(.data)
<LI> inverter.o(.data)
</UL>
<P><STRONG><a name="[3f]"></a>USART1_IRQHandler</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, gd32f3x0_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; usart_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_clear
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f3x0_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[d1]"></a>MainScreen()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, inverter.o(i._Z10MainScreenv))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = MainScreen() &rArr; DrawMainScreen &rArr; DrawTextAligment &rArr; PixelsBase::print(short, short, char*, signed char*) &rArr; PixelsBase::printString(short, short, char*, bool, signed char*) &rArr; PixelsBase::vLine(short, short, short) &rArr; PixelsBase::fill(int, short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMainScreen
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuBack
</UL>

<P><STRONG><a name="[e1]"></a>RTC_config()</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, main.o(i._Z10RTC_configv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTC_config() &rArr; rcu_osci_stab_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_register_sync_wait
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_rtc_clock_config
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_osci_stab_wait
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_osci_on
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_backup_write_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e8]"></a>adc_config()</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, main.o(i._Z10adc_configv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = adc_config() &rArr; adc_regular_channel_config
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_special_function_config
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_software_trigger_enable
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_resolution_config
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_regular_channel_config
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_external_trigger_source_config
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_external_trigger_config
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_enable
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_data_alignment_config
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_channel_length_config
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_calibration_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f3]"></a>i2c_config()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, main.o(i._Z10i2c_configv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = i2c_config() &rArr; i2c_clock_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_mode_addr_config
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_enable
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_clock_config
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f7]"></a>keyPressed()</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, inverter.o(i._Z10keyPressedv))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = keyPressed() &rArr; blocked() &rArr; DrawMainScreen &rArr; DrawTextAligment &rArr; PixelsBase::print(short, short, char*, signed char*) &rArr; PixelsBase::printString(short, short, char*, bool, signed char*) &rArr; PixelsBase::vLine(short, short, short) &rArr; PixelsBase::fill(int, short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemTick
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pixels::displayOn()
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blocked()
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMainScreen
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[fb]"></a>rcu_config()</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, main.o(i._Z10rcu_configv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rcu_config()
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_adc_clock_config
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[122]"></a>crc32_1byte(const void*, int, unsigned)</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, crc32.o(i._Z11crc32_1bytePKvij))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = crc32_1byte(const void*, int, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFlash()
</UL>

<P><STRONG><a name="[fd]"></a>gpio_config()</STRONG> (Thumb, 354 bytes, Stack size 24 bytes, main.o(i._Z11gpio_configv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gpio_config() &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_set
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[101]"></a>startScreen()</STRONG> (Thumb, 774 bytes, Stack size 88 bytes, inverter.o(i._Z11startScreenv))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = startScreen() &rArr; DrawMainScreen &rArr; DrawTextAligment &rArr; PixelsBase::print(short, short, char*, signed char*) &rArr; PixelsBase::printString(short, short, char*, bool, signed char*) &rArr; PixelsBase::vLine(short, short, short) &rArr; PixelsBase::fill(int, short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB::RGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::setFont(const unsigned char*)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::print(short, short, char*, signed char*)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::clear()
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::getTextWidth(char*, signed char*)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smooth_backlight
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTemperature
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCalendarMode
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pixels::displayOn()
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::setColor(RGB)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::setBackground(RGB)
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPower(signed char)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTextAligment
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMainScreen
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceON()
</UL>

<P><STRONG><a name="[c0]"></a>DrawDateEdit()</STRONG> (Thumb, 486 bytes, Stack size 80 bytes, inverter.o(i._Z12DrawDateEditv))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = DrawDateEdit() &rArr; DrawTextAligment &rArr; PixelsBase::print(short, short, char*, signed char*) &rArr; PixelsBase::printString(short, short, char*, bool, signed char*) &rArr; PixelsBase::vLine(short, short, short) &rArr; PixelsBase::fill(int, short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB::RGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::setFont(const unsigned char*)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::getTextLineHeight()
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::getTextWidth(char*, signed char*)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::setColor(RGB)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::setBackground(RGB)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTextAligment
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMenuText
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawEditParameter
</UL>

<P><STRONG><a name="[c1]"></a>DrawTimeEdit()</STRONG> (Thumb, 470 bytes, Stack size 80 bytes, inverter.o(i._Z12DrawTimeEditv))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = DrawTimeEdit() &rArr; DrawTextAligment &rArr; PixelsBase::print(short, short, char*, signed char*) &rArr; PixelsBase::printString(short, short, char*, bool, signed char*) &rArr; PixelsBase::vLine(short, short, short) &rArr; PixelsBase::fill(int, short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB::RGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::setFont(const unsigned char*)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::getTextLineHeight()
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::getTextWidth(char*, signed char*)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::setColor(RGB)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::setBackground(RGB)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTextAligment
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMenuText
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawEditParameter
</UL>

<P><STRONG><a name="[b7]"></a>DrawCustomDay(int)</STRONG> (Thumb, 220 bytes, Stack size 72 bytes, inverter.o(i._Z13DrawCustomDayi))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = DrawCustomDay(int) &rArr; DrawTextAligment &rArr; PixelsBase::print(short, short, char*, signed char*) &rArr; PixelsBase::printString(short, short, char*, bool, signed char*) &rArr; PixelsBase::vLine(short, short, short) &rArr; PixelsBase::fill(int, short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB::RGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::setFont(const unsigned char*)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTextAligment
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawEditParameter
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomPrev
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomNext
</UL>

<P><STRONG><a name="[b9]"></a>DrawLeftRight()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, inverter.o(i._Z13DrawLeftRightv))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = DrawLeftRight() &rArr; PixelsBase::drawCompressedBitmap(short, short, const unsigned char*) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::drawCompressedBitmap(short, short, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMenu
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawEditParameter
</UL>

<P><STRONG><a name="[104]"></a>f_open_window(signed char, unsigned char)</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, inverter.o(i._Z13f_open_windowah))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = f_open_window(signed char, unsigned char) &rArr; DrawMainScreen &rArr; DrawTextAligment &rArr; PixelsBase::print(short, short, char*, signed char*) &rArr; PixelsBase::printString(short, short, char*, bool, signed char*) &rArr; PixelsBase::vLine(short, short, short) &rArr; PixelsBase::fill(int, short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemTick
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getModeTemperature
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMainScreen
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[105]"></a>heat_timer_config()</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, main.o(i._Z17heat_timer_configv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = heat_timer_config() &rArr; timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_struct_para_init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_enable
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10c]"></a>pwm_config_buzzer()</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, main.o(i._Z17pwm_config_buzzerv))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = pwm_config_buzzer() &rArr; timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_primary_output_config
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_shadow_config
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_pulse_value_config
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_mode_config
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_config
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_auto_reload_shadow_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[113]"></a>pwm_config_lcd_bl()</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, main.o(i._Z17pwm_config_lcd_blv))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = pwm_config_lcd_bl() &rArr; timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_primary_output_config
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_shadow_config
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_pulse_value_config
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_mode_config
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_config
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_auto_reload_shadow_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[114]"></a>I2C_ClearBusyFlagErratum()</STRONG> (Thumb, 306 bytes, Stack size 24 bytes, inverter.o(i._Z24I2C_ClearBusyFlagErratumv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = I2C_ClearBusyFlagErratum() &rArr; i2c_clock_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_mode_addr_config
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_enable
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_clock_config
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_set
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_software_reset_config
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_disable
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_bit_get
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xw09A_read_data
</UL>

<P><STRONG><a name="[a0]"></a>GoOK(int)</STRONG> (Thumb, 556 bytes, Stack size 48 bytes, inverter.o(i._Z4GoOKi))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = GoOK(int) &rArr; PixelsBase::print(short, short, char*, signed char*) &rArr; PixelsBase::printString(short, short, char*, bool, signed char*) &rArr; PixelsBase::vLine(short, short, short) &rArr; PixelsBase::fill(int, short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemTick
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB::RGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::setFont(const unsigned char*)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::print(short, short, char*, signed char*)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::clear()
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::fillRoundRectangle(short, short, short, short, short)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::getTextLineHeight()
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::getTextWidth(char*, signed char*)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smooth_backlight
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::setColor(RGB)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::setBackground(RGB)
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcceptParameter
</UL>

<P><STRONG><a name="[f8]"></a>beep()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, inverter.o(i._Z4beepv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = beep()
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_pulse_value_config
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyPressed()
</UL>

<P><STRONG><a name="[118]"></a>MenuOK()</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, inverter.o(i._Z6MenuOKv))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = MenuOK() &rArr; PrepareEditParameter &rArr; AcceptParameter &rArr; MenuBack &rArr; DrawMenu &rArr; DrawEditParameter &rArr; DrawTimeEdit() &rArr; DrawTextAligment &rArr; PixelsBase::print(short, short, char*, signed char*) &rArr; PixelsBase::printString(short, short, char*, bool, signed char*) &rArr; PixelsBase::vLine(short, short, short) &rArr; PixelsBase::fill(int, short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_current_time_get
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB::RGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::fillRectangle(short, short, short, short)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smooth_backlight
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcdToDec
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::setColor(RGB)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareEditParameter
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMenu
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcceptParameter
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[172]"></a>isLeap(int)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, inverter.o(i._Z6isLeapi))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isValidDate
</UL>

<P><STRONG><a name="[fa]"></a>blocked()</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, inverter.o(i._Z7blockedv))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = blocked() &rArr; DrawMainScreen &rArr; DrawTextAligment &rArr; PixelsBase::print(short, short, char*, signed char*) &rArr; PixelsBase::printString(short, short, char*, bool, signed char*) &rArr; PixelsBase::vLine(short, short, short) &rArr; PixelsBase::fill(int, short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB::RGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::clear()
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::sizeCompressedBitmap(short&, short&, const unsigned char*)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::drawCompressedBitmap(short, short, const unsigned char*)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pixels::displayOff()
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::setColor(RGB)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::setBackground(RGB)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMainScreen
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyPressed()
</UL>

<P><STRONG><a name="[11a]"></a>MenuNext()</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, inverter.o(i._Z8MenuNextv))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = MenuNext() &rArr; DrawMenu &rArr; DrawEditParameter &rArr; DrawTimeEdit() &rArr; DrawTextAligment &rArr; PixelsBase::print(short, short, char*, signed char*) &rArr; PixelsBase::printString(short, short, char*, bool, signed char*) &rArr; PixelsBase::vLine(short, short, short) &rArr; PixelsBase::fill(int, short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smooth_backlight
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMenu
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[11b]"></a>MenuPrev()</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, inverter.o(i._Z8MenuPrevv))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = MenuPrev() &rArr; DrawMenu &rArr; DrawEditParameter &rArr; DrawTimeEdit() &rArr; DrawTextAligment &rArr; PixelsBase::print(short, short, char*, signed char*) &rArr; PixelsBase::printString(short, short, char*, bool, signed char*) &rArr; PixelsBase::vLine(short, short, short) &rArr; PixelsBase::fill(int, short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smooth_backlight
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMenu
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[103]"></a>SetPower(signed char)</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, inverter.o(i._Z8SetPowera))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetPower(signed char)
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceOFF()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceON()
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startScreen()
</UL>

<P><STRONG><a name="[11d]"></a>deviceON()</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, inverter.o(i._Z8deviceONv))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = deviceON() &rArr; startScreen() &rArr; DrawMainScreen &rArr; DrawTextAligment &rArr; PixelsBase::print(short, short, char*, signed char*) &rArr; PixelsBase::printString(short, short, char*, bool, signed char*) &rArr; PixelsBase::vLine(short, short, short) &rArr; PixelsBase::fill(int, short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemTick
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPower(signed char)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startScreen()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_uart_int
</UL>

<P><STRONG><a name="[11e]"></a>EnterMenu()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, inverter.o(i._Z9EnterMenuv))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = EnterMenu() &rArr; DrawMenu &rArr; DrawEditParameter &rArr; DrawTimeEdit() &rArr; DrawTextAligment &rArr; PixelsBase::print(short, short, char*, signed char*) &rArr; PixelsBase::printString(short, short, char*, bool, signed char*) &rArr; PixelsBase::vLine(short, short, short) &rArr; PixelsBase::fill(int, short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smooth_backlight
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMenu
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[b4]"></a>SaveFlash()</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, inverter.o(i._Z9SaveFlashv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SaveFlash() &rArr; fmc_word_program &rArr; fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_word_program
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_unlock
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_page_erase
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_lock
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_flag_clear
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32_1byte(const void*, int, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcceptParameter
</UL>

<P><STRONG><a name="[125]"></a>deviceOFF()</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, inverter.o(i._Z9deviceOFFv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = deviceOFF() &rArr; PixelsBase::clear() &rArr; PixelsBase::fillRectangle(short, short, short, short) &rArr; PixelsBase::fill(int, short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::clear()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smooth_backlight
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pixels::displayOff()
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPower(signed char)
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_uart_int
</UL>

<P><STRONG><a name="[126]"></a>spi0_init()</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, main.o(i._Z9spi0_initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = spi0_init()
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_enable
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_dma_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12a]"></a>uart_init()</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, main.o(i._Z9uart_initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = uart_init() &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_word_length_set
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmit_config
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_stop_bit_set
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receive_config
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_parity_config
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_dma_receive_config
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[136]"></a>unblocked()</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, inverter.o(i._Z9unblockedv))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = unblocked() &rArr; DrawMainScreen &rArr; DrawTextAligment &rArr; PixelsBase::print(short, short, char*, signed char*) &rArr; PixelsBase::printString(short, short, char*, bool, signed char*) &rArr; PixelsBase::vLine(short, short, short) &rArr; PixelsBase::fill(int, short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB::RGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::clear()
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::sizeCompressedBitmap(short&, short&, const unsigned char*)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::drawCompressedBitmap(short, short, const unsigned char*)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pixels::displayOff()
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::setColor(RGB)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::setBackground(RGB)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMainScreen
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[137]"></a>PixelsBase::printString(short, short, char*, bool, signed char*)</STRONG> (Thumb, 1536 bytes, Stack size 160 bytes, pixels.o(i._ZN10PixelsBase11printStringEssPcbPa))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = PixelsBase::printString(short, short, char*, bool, signed char*) &rArr; PixelsBase::vLine(short, short, short) &rArr; PixelsBase::fill(int, short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::drawPixel(short, short)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::setColor(unsigned char, unsigned char, unsigned char)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::vLine(short, short, short)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::hLine(short, short, short)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::computeColor(RGB, unsigned char)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::setColor(RGB)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::cleanText(short, short, char*, signed char*)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::print(short, short, char*, signed char*)
</UL>

<P><STRONG><a name="[13e]"></a>PixelsBase::computeColor(RGB, double)</STRONG> (Thumb, 286 bytes, Stack size 104 bytes, pixels.o(i._ZN10PixelsBase12computeColorE3RGBd))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = PixelsBase::computeColor(RGB, double) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB::RGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::putColor(short, short, bool, double)
</UL>

<P><STRONG><a name="[13a]"></a>PixelsBase::computeColor(RGB, unsigned char)</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, pixels.o(i._ZN10PixelsBase12computeColorE3RGBh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PixelsBase::computeColor(RGB, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB::RGB(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::printString(short, short, char*, bool, signed char*)
</UL>

<P><STRONG><a name="[aa]"></a>PixelsBase::getTextWidth(char*, signed char*)</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, pixels.o(i._ZN10PixelsBase12getTextWidthEPcPa))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PixelsBase::getTextWidth(char*, signed char*) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoOK(int)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTimeEdit()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawDateEdit()
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startScreen()
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTextSelected
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTextAligment
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTemperature
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMenuTitle2
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMenuTitle
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMenuText
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMenu
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawEditParameter
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanTemperature
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcceptParameter
</UL>

<P><STRONG><a name="[bd]"></a>PixelsBase::fillRectangle(short, short, short, short)</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, pixels.o(i._ZN10PixelsBase13fillRectangleEssss))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = PixelsBase::fillRectangle(short, short, short, short) &rArr; PixelsBase::fill(int, short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB::convertTo565()
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::fill(int, short, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::clear()
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::fillRoundRectangle(short, short, short, short, short)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_window_func
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuOK()
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawWifi
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTextSelected
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTextAligment
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMenu
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMainScreen
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawEditParameter
</UL>

<P><STRONG><a name="[a9]"></a>PixelsBase::setBackground(RGB)</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, inverter.o(i._ZN10PixelsBase13setBackgroundE3RGB))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PixelsBase::setBackground(RGB)
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawRoundRect
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unblocked()
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blocked()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoOK(int)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTimeEdit()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawDateEdit()
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startScreen()
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTextSelected
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTextAligment
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMenu
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMainScreen
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawEditParameter
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcceptParameter
</UL>

<P><STRONG><a name="[175]"></a>PixelsBase::setOrientation(unsigned char)</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, pixels.o(i._ZN10PixelsBase14setOrientationEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PixelsBase::setOrientation(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[4e]"></a>PixelsBase::deviceWriteData(unsigned char, unsigned char)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pixels.o(i._ZN10PixelsBase15deviceWriteDataEhh))
<BR>[Address Reference Count : 1]<UL><LI> pixels.o(.constdata__ZTV10PixelsBase)
</UL>
<P><STRONG><a name="[148]"></a>PixelsBase::setCurrentPixel(RGB)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, pixels.o(i._ZN10PixelsBase15setCurrentPixelE3RGB))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PixelsBase::setCurrentPixel(RGB)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB::convertTo565()
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::drawPixel(short, short)
</UL>

<P><STRONG><a name="[14d]"></a>PixelsBase::setCurrentPixel(short)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pixels.o(i._ZN10PixelsBase15setCurrentPixelEs))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::drawCompressedBitmap(short, short, const unsigned char*)
</UL>

<P><STRONG><a name="[ab]"></a>PixelsBase::getTextLineHeight()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pixels.o(i._ZN10PixelsBase17getTextLineHeightEv))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoOK(int)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTimeEdit()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawDateEdit()
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTextSelected
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTextAligment
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawEditParameter
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcceptParameter
</UL>

<P><STRONG><a name="[a7]"></a>PixelsBase::fillRoundRectangle(short, short, short, short, short)</STRONG> (Thumb, 412 bytes, Stack size 80 bytes, pixels.o(i._ZN10PixelsBase18fillRoundRectangleEsssss))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = PixelsBase::fillRoundRectangle(short, short, short, short, short) &rArr; PixelsBase::fillRectangle(short, short, short, short) &rArr; PixelsBase::fill(int, short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::hLine(short, short, short)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::fillRectangle(short, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawRoundRect
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoOK(int)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTextAligment
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawEditParameter
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcceptParameter
</UL>

<P><STRONG><a name="[c3]"></a>PixelsBase::drawCompressedBitmap(short, short, const unsigned char*)</STRONG> (Thumb, 728 bytes, Stack size 136 bytes, pixels.o(i._ZN10PixelsBase20drawCompressedBitmapEssPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = PixelsBase::drawCompressedBitmap(short, short, const unsigned char*) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitStream::readBits(unsigned char)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitStream::readBit()
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitStream::readNumber()
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::setCurrentPixel(short)
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_window_func
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unblocked()
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blocked()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawLeftRight()
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawWindowOpen
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawWifi
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMenu
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMainScreen
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawEditParameter
</UL>

<P><STRONG><a name="[c2]"></a>PixelsBase::sizeCompressedBitmap(short&, short&, const unsigned char*)</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, pixels.o(i._ZN10PixelsBase20sizeCompressedBitmapERsS0_PKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PixelsBase::sizeCompressedBitmap(short&, short&, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unblocked()
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blocked()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMenu
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawEditParameter
</UL>

<P><STRONG><a name="[4f]"></a>PixelsBase::drawRoundRectangleAntialiased(short, short, short, short, short, short, bool)</STRONG> (Thumb, 1238 bytes, Stack size 152 bytes, pixels.o(i._ZN10PixelsBase29drawRoundRectangleAntialiasedEssssssb))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = PixelsBase::drawRoundRectangleAntialiased(short, short, short, short, short, short, bool) &rArr; PixelsBase::putColor(short, short, bool, double) &rArr; PixelsBase::computeColor(RGB, double) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::abs(float)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::putColor(short, short, bool, double)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::vLine(short, short, short)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::hLine(short, short, short)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Address Reference Count : 2]<UL><LI> pixels.o(.constdata__ZTV10PixelsBase)
<LI> inverter.o(.constdata__ZTV6Pixels)
</UL>
<P><STRONG><a name="[147]"></a>PixelsBase::fill(int, short, short, short, short)</STRONG> (Thumb, 364 bytes, Stack size 40 bytes, pixels.o(i._ZN10PixelsBase4fillEissss))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PixelsBase::fill(int, short, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::vLine(short, short, short)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::hLine(short, short, short)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::fillRectangle(short, short, short, short)
</UL>

<P><STRONG><a name="[a4]"></a>PixelsBase::clear()</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, pixels.o(i._ZN10PixelsBase5clearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = PixelsBase::clear() &rArr; PixelsBase::fillRectangle(short, short, short, short) &rArr; PixelsBase::fill(int, short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::fillRectangle(short, short, short, short)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::setColor(RGB)
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unblocked()
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceOFF()
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blocked()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoOK(int)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startScreen()
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawWindowOpen
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMenu
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMainScreen
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawEditParameter
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcceptParameter
</UL>

<P><STRONG><a name="[13c]"></a>PixelsBase::hLine(short, short, short)</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, pixels.o(i._ZN10PixelsBase5hLineEsss))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PixelsBase::hLine(short, short, short) &rArr; PixelsBase::fill(int, short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB::convertTo565()
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::fill(int, short, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::printString(short, short, char*, bool, signed char*)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::fillOval(short, short, short, short)
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::drawRoundRectangleAntialiased(short, short, short, short, short, short, bool)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::fillRoundRectangle(short, short, short, short, short)
</UL>

<P><STRONG><a name="[ac]"></a>PixelsBase::print(short, short, char*, signed char*)</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, pixels.o(i._ZN10PixelsBase5printEssPcPa))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = PixelsBase::print(short, short, char*, signed char*) &rArr; PixelsBase::printString(short, short, char*, bool, signed char*) &rArr; PixelsBase::vLine(short, short, short) &rArr; PixelsBase::fill(int, short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::printString(short, short, char*, bool, signed char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoOK(int)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startScreen()
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTextSelected
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTextAligment
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTemperature
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMenuTitle2
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMenuTitle
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMenuText
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMenu
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMainScreen
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawEditParameter
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcceptParameter
</UL>

<P><STRONG><a name="[139]"></a>PixelsBase::vLine(short, short, short)</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, pixels.o(i._ZN10PixelsBase5vLineEsss))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PixelsBase::vLine(short, short, short) &rArr; PixelsBase::fill(int, short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB::convertTo565()
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::fill(int, short, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::printString(short, short, char*, bool, signed char*)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::fillOval(short, short, short, short)
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::drawRoundRectangleAntialiased(short, short, short, short, short, short, bool)
</UL>

<P><STRONG><a name="[a8]"></a>PixelsBase::setFont(const unsigned char*)</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, pixels.o(i._ZN10PixelsBase7setFontEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PixelsBase::setFont(const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoOK(int)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawCustomDay(int)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTimeEdit()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawDateEdit()
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startScreen()
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTemperature
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMenuTitle2
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMenuTitle
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMenuText
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMenu
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMainScreen
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawEditParameter
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanTemperature
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcceptParameter
</UL>

<P><STRONG><a name="[c9]"></a>PixelsBase::fillOval(short, short, short, short)</STRONG> (Thumb, 618 bytes, Stack size 128 bytes, pixels.o(i._ZN10PixelsBase8fillOvalEssss))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = PixelsBase::fillOval(short, short, short, short) &rArr; PixelsBase::vLine(short, short, short) &rArr; PixelsBase::fill(int, short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::vLine(short, short, short)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::hLine(short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMenu
</UL>

<P><STRONG><a name="[157]"></a>PixelsBase::getPixel(short, short)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, pixels.o(i._ZN10PixelsBase8getPixelEss))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PixelsBase::getPixel(short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::putColor(short, short, bool, double)
</UL>

<P><STRONG><a name="[154]"></a>PixelsBase::putColor(short, short, bool, double)</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, pixels.o(i._ZN10PixelsBase8putColorEssbd))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = PixelsBase::putColor(short, short, bool, double) &rArr; PixelsBase::computeColor(RGB, double) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::drawPixel(short, short)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::getPixel(short, short)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::computeColor(RGB, double)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::setColor(RGB)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::drawRoundRectangleAntialiased(short, short, short, short, short, short, bool)
</UL>

<P><STRONG><a name="[a6]"></a>PixelsBase::setColor(RGB)</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, inverter.o(i._ZN10PixelsBase8setColorE3RGB))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PixelsBase::setColor(RGB)
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::setColor(unsigned char, unsigned char, unsigned char)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::putColor(short, short, bool, double)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::printString(short, short, char*, bool, signed char*)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::clear()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_window_func
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawRoundRect
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unblocked()
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blocked()
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuOK()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoOK(int)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTimeEdit()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawDateEdit()
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startScreen()
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawWifi
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTextSelected
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTextAligment
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTemperature
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMenuTitle2
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMenuTitle
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMenuText
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMenu
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMainScreen
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawEditParameter
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanTemperature
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcceptParameter
</UL>

<P><STRONG><a name="[138]"></a>PixelsBase::setColor(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, pixels.o(i._ZN10PixelsBase8setColorEhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = PixelsBase::setColor(unsigned char, unsigned char, unsigned char) &rArr; PixelsBase::setColor(RGB)
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB::RGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::setColor(RGB)
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::printString(short, short, char*, bool, signed char*)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::PixelsBase(unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[b6]"></a>PixelsBase::cleanText(short, short, char*, signed char*)</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, pixels.o(i._ZN10PixelsBase9cleanTextEssPcPa))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = PixelsBase::cleanText(short, short, char*, signed char*) &rArr; PixelsBase::printString(short, short, char*, bool, signed char*) &rArr; PixelsBase::vLine(short, short, short) &rArr; PixelsBase::fill(int, short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::printString(short, short, char*, bool, signed char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanTemperature
</UL>

<P><STRONG><a name="[13b]"></a>PixelsBase::drawPixel(short, short)</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, pixels.o(i._ZN10PixelsBase9drawPixelEss))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PixelsBase::drawPixel(short, short) &rArr; PixelsBase::setCurrentPixel(RGB)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::setCurrentPixel(RGB)
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::putColor(short, short, bool, double)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::printString(short, short, char*, bool, signed char*)
</UL>

<P><STRONG><a name="[4d]"></a>PixelsBase::quickFill(int, short, short, short, short)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pixels.o(i._ZN10PixelsBase9quickFillEissss))
<BR>[Address Reference Count : 1]<UL><LI> pixels.o(.constdata__ZTV10PixelsBase)
</UL>
<P><STRONG><a name="[4c]"></a>PixelsBase::setRegion(short, short, short, short)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pixels.o(i._ZN10PixelsBase9setRegionEssss))
<BR>[Address Reference Count : 1]<UL><LI> pixels.o(.constdata__ZTV10PixelsBase)
</UL>
<P><STRONG><a name="[158]"></a>PixelsBase::PixelsBase(unsigned short, unsigned short)</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, pixels.o(i._ZN10PixelsBaseC1Ett))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = PixelsBase::PixelsBase(unsigned short, unsigned short) &rArr; PixelsBase::setColor(unsigned char, unsigned char, unsigned char) &rArr; PixelsBase::setColor(RGB)
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::setColor(unsigned char, unsigned char, unsigned char)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB::RGB(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_inverter_c_ffec7761
</UL>

<P><STRONG><a name="[1dd]"></a>PixelsBase::PixelsBase__sub_object(unsigned short, unsigned short)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, pixels.o(i._ZN10PixelsBaseC1Ett), UNUSED)

<P><STRONG><a name="[177]"></a>ClickButton::getPressed()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, inverter.o(i._ZN11ClickButton10getPressedEv))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[179]"></a>ClickButton::getLongPressed()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, inverter.o(i._ZN11ClickButton14getLongPressedEv))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[159]"></a>ClickButton::update()</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, inverter.o(i._ZN11ClickButton6updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ClickButton::update() &rArr; xw09A_read_data &rArr; I2C_ClearBusyFlagErratum() &rArr; i2c_clock_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemTick
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xw09A_read_data
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[16a]"></a>ClickButton::ClickButton(unsigned char, unsigned short, bool)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, inverter.o(i._ZN11ClickButtonC1Ehtb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ClickButton::ClickButton(unsigned char, unsigned short, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_inverter_c_ffec7761
</UL>

<P><STRONG><a name="[1de]"></a>ClickButton::ClickButton__sub_object(unsigned char, unsigned short, bool)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, inverter.o(i._ZN11ClickButtonC1Ehtb), UNUSED)

<P><STRONG><a name="[146]"></a>RGB::convertTo565()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pixels.o(i._ZN3RGB12convertTo565Ev))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::vLine(short, short, short)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::hLine(short, short, short)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::setCurrentPixel(RGB)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::fillRectangle(short, short, short, short)
</UL>

<P><STRONG><a name="[a5]"></a>RGB::RGB(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pixels.o(i._ZN3RGBC1Ehhh))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_inverter_c_ffec7761
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::setColor(unsigned char, unsigned char, unsigned char)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::computeColor(RGB, unsigned char)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::computeColor(RGB, double)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::PixelsBase(unsigned short, unsigned short)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_window_func
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawRoundRect
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unblocked()
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blocked()
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuOK()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoOK(int)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawCustomDay(int)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTimeEdit()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawDateEdit()
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startScreen()
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawWifi
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTextSelected
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTextAligment
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTemperature
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMenuTitle2
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMenuTitle
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMenuText
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMenu
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMainScreen
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawEditParameter
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanTemperature
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcceptParameter
</UL>

<P><STRONG><a name="[1df]"></a>RGB::RGB__sub_object(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, pixels.o(i._ZN3RGBC1Ehhh), UNUSED)

<P><STRONG><a name="[15b]"></a>PPI16::writeCmd(unsigned char)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, inverter.o(i._ZN5PPI168writeCmdEh))
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pixels::setRegion(short, short, short, short)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pixels::displayOn()
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pixels::init()
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pixels::displayOff()
</UL>

<P><STRONG><a name="[15d]"></a>PPI16::writeData(unsigned char)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, inverter.o(i._ZN5PPI169writeDataEh))
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pixels::setRegion(short, short, short, short)
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pixels::init()
</UL>

<P><STRONG><a name="[15e]"></a>PPI16::writeData(unsigned char, unsigned char)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, inverter.o(i._ZN5PPI169writeDataEhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PPI16::writeData(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pixels::quickFill(int, short, short, short, short)
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pixels::deviceWriteData(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[119]"></a>Pixels::displayOff()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, inverter.o(i._ZN6Pixels10displayOffEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Pixels::displayOff()
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPI16::writeCmd(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unblocked()
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceOFF()
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blocked()
</UL>

<P><STRONG><a name="[52]"></a>Pixels::deviceWriteData(unsigned char, unsigned char)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, inverter.o(i._ZN6Pixels15deviceWriteDataEhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Pixels::deviceWriteData(unsigned char, unsigned char) &rArr; PPI16::writeData(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPI16::writeData(unsigned char, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> inverter.o(.constdata__ZTV6Pixels)
</UL>
<P><STRONG><a name="[53]"></a>Pixels::init()</STRONG> (Thumb, 524 bytes, Stack size 24 bytes, inverter.o(i._ZN6Pixels4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Pixels::init()
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPI16::writeData(unsigned char)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPI16::writeCmd(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> inverter.o(.constdata__ZTV6Pixels)
</UL>
<P><STRONG><a name="[f9]"></a>Pixels::displayOn()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, inverter.o(i._ZN6Pixels9displayOnEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Pixels::displayOn()
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPI16::writeCmd(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startScreen()
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyPressed()
</UL>

<P><STRONG><a name="[51]"></a>Pixels::quickFill(int, short, short, short, short)</STRONG> (Thumb, 322 bytes, Stack size 40 bytes, inverter.o(i._ZN6Pixels9quickFillEissss))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Pixels::quickFill(int, short, short, short, short) &rArr; PPI16::writeData(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPI16::writeData(unsigned char, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> inverter.o(.constdata__ZTV6Pixels)
</UL>
<P><STRONG><a name="[50]"></a>Pixels::setRegion(short, short, short, short)</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, inverter.o(i._ZN6Pixels9setRegionEssss))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Pixels::setRegion(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPI16::writeData(unsigned char)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPI16::writeCmd(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> inverter.o(.constdata__ZTV6Pixels)
</UL>
<P><STRONG><a name="[17f]"></a>Stream::put(unsigned char)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wifi.o(i._ZN6Stream3putEh))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_wifi_state
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_uart_int
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;query_settings
</UL>

<P><STRONG><a name="[17e]"></a>Stream::clear()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wifi.o(i._ZN6Stream5clearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Stream::clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_wifi_state
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_uart_int
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;query_settings
</UL>

<P><STRONG><a name="[54]"></a>Stream::flush()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, wifi.o(i._ZN6Stream5flushEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Stream::flush()
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wifi.o(.constdata__ZTV6Stream)
</UL>
<P><STRONG><a name="[14b]"></a>BitStream::readNumber()</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, pixels.o(i._ZN9BitStream10readNumberEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BitStream::readNumber() &rArr; BitStream::readBits(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitStream::readBits(unsigned char)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitStream::readBit()
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::drawCompressedBitmap(short, short, const unsigned char*)
</UL>

<P><STRONG><a name="[14a]"></a>BitStream::readBit()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, pixels.o(i._ZN9BitStream7readBitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BitStream::readBit()
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitStream::readNumber()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::drawCompressedBitmap(short, short, const unsigned char*)
</UL>

<P><STRONG><a name="[14c]"></a>BitStream::readBits(unsigned char)</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, pixels.o(i._ZN9BitStream8readBitsEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BitStream::readBits(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitStream::readNumber()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::drawCompressedBitmap(short, short, const unsigned char*)
</UL>

<P><STRONG><a name="[152]"></a>std::abs(float)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pixels.o(i._ZSt3absf))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::drawRoundRectangleAntialiased(short, short, short, short, short, short, bool)
</UL>

<P><STRONG><a name="[14e]"></a>operator delete[] (void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, array_del.o(i._ZdaPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_uart_int
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::drawCompressedBitmap(short, short, const unsigned char*)
</UL>

<P><STRONG><a name="[160]"></a>operator delete (void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, delete.o(i._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>

<P><STRONG><a name="[149]"></a>operator new[] (unsigned)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, array_new.o(i._Znaj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_uart_int
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::drawCompressedBitmap(short, short, const unsigned char*)
</UL>

<P><STRONG><a name="[161]"></a>operator new(unsigned)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, new.o(i._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_new_handler_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>

<P><STRONG><a name="[163]"></a>__hardfp_logf</STRONG> (Thumb, 320 bytes, Stack size 8 bytes, logf.o(i.__hardfp_logf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_logf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_divzero
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTemperature
</UL>

<P><STRONG><a name="[1e0]"></a>__mathlib_logf</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, logf.o(i.__hardfp_logf), UNUSED)

<P><STRONG><a name="[167]"></a>__hardfp_rintf</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rintf.o(i.__hardfp_rintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_rintf &rArr; _frnd &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTemperature
</UL>

<P><STRONG><a name="[150]"></a>__hardfp_sqrt</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, sqrt.o(i.__hardfp_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __hardfp_sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::drawRoundRectangleAntialiased(short, short, short, short, short, short, bool)
</UL>

<P><STRONG><a name="[166]"></a>__mathlib_flt_divzero</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_divzero))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_logf
</UL>

<P><STRONG><a name="[164]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_logf
</UL>

<P><STRONG><a name="[165]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_logf
</UL>

<P><STRONG><a name="[77]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[f1]"></a>adc_calibration_enable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gd32f3x0_adc.o(i.adc_calibration_enable))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config()
</UL>

<P><STRONG><a name="[ea]"></a>adc_channel_length_config</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, gd32f3x0_adc.o(i.adc_channel_length_config))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config()
</UL>

<P><STRONG><a name="[ef]"></a>adc_data_alignment_config</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32f3x0_adc.o(i.adc_data_alignment_config))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config()
</UL>

<P><STRONG><a name="[f0]"></a>adc_enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f3x0_adc.o(i.adc_enable))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config()
</UL>

<P><STRONG><a name="[ed]"></a>adc_external_trigger_config</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, gd32f3x0_adc.o(i.adc_external_trigger_config))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config()
</UL>

<P><STRONG><a name="[ee]"></a>adc_external_trigger_source_config</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gd32f3x0_adc.o(i.adc_external_trigger_source_config))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config()
</UL>

<P><STRONG><a name="[16e]"></a>adc_flag_clear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f3x0_adc.o(i.adc_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTemperature
</UL>

<P><STRONG><a name="[16f]"></a>adc_flag_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f3x0_adc.o(i.adc_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTemperature
</UL>

<P><STRONG><a name="[eb]"></a>adc_regular_channel_config</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, gd32f3x0_adc.o(i.adc_regular_channel_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = adc_regular_channel_config
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config()
</UL>

<P><STRONG><a name="[16d]"></a>adc_regular_data_read</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f3x0_adc.o(i.adc_regular_data_read))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTemperature
</UL>

<P><STRONG><a name="[ec]"></a>adc_resolution_config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f3x0_adc.o(i.adc_resolution_config))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config()
</UL>

<P><STRONG><a name="[f2]"></a>adc_software_trigger_enable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f3x0_adc.o(i.adc_software_trigger_enable))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config()
</UL>

<P><STRONG><a name="[e9]"></a>adc_special_function_config</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, gd32f3x0_adc.o(i.adc_special_function_config))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config()
</UL>

<P><STRONG><a name="[d3]"></a>bcdToDec</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, inverter.o(i.bcdToDec))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuOK()
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareEditParameter
</UL>

<P><STRONG><a name="[180]"></a>chksum8</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, wifi.o(i.chksum8))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_wifi_state
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_uart_int
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;query_settings
</UL>

<P><STRONG><a name="[b1]"></a>decToBcd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, inverter.o(i.decToBcd))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcceptParameter
</UL>

<P><STRONG><a name="[ad]"></a>delay_1ms</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, systick.o(i.delay_1ms))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init()
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config()
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_wifi_state
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smooth_backlight
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTemperature
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pixels::init()
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unblocked()
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPower(signed char)
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blocked()
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoOK(int)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startScreen()
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcceptParameter
</UL>

<P><STRONG><a name="[d7]"></a>delay_decrement</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, systick.o(i.delay_decrement))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[c8]"></a>drawRoundRect</STRONG> (Thumb, 298 bytes, Stack size 48 bytes, inverter.o(i.drawRoundRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = drawRoundRect &rArr; PixelsBase::fillRoundRectangle(short, short, short, short, short) &rArr; PixelsBase::fillRectangle(short, short, short, short) &rArr; PixelsBase::fill(int, short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB::RGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::fillRoundRectangle(short, short, short, short, short)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::setColor(RGB)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::setBackground(RGB)
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMenu
</UL>

<P><STRONG><a name="[17c]"></a>exti_init</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, gd32f3x0_exti.o(i.exti_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = exti_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[120]"></a>fmc_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32f3x0_fmc.o(i.fmc_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFlash()
</UL>

<P><STRONG><a name="[124]"></a>fmc_lock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f3x0_fmc.o(i.fmc_lock))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFlash()
</UL>

<P><STRONG><a name="[121]"></a>fmc_page_erase</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, gd32f3x0_fmc.o(i.fmc_page_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fmc_page_erase &rArr; fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_ready_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFlash()
</UL>

<P><STRONG><a name="[16b]"></a>fmc_ready_wait</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, gd32f3x0_fmc.o(i.fmc_ready_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_word_program
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_page_erase
</UL>

<P><STRONG><a name="[16c]"></a>fmc_state_get</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gd32f3x0_fmc.o(i.fmc_state_get))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_ready_wait
</UL>

<P><STRONG><a name="[11f]"></a>fmc_unlock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f3x0_fmc.o(i.fmc_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFlash()
</UL>

<P><STRONG><a name="[123]"></a>fmc_word_program</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, gd32f3x0_fmc.o(i.fmc_word_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fmc_word_program &rArr; fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_ready_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFlash()
</UL>

<P><STRONG><a name="[a3]"></a>getCalendarMode</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, inverter.o(i.getCalendarMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = getCalendarMode &rArr; rtc_current_time_get
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_current_time_get
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_uart_int
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startScreen()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcceptParameter
</UL>

<P><STRONG><a name="[c6]"></a>getModeTemperature</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, inverter.o(i.getModeTemperature))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open_window(signed char, unsigned char)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMainScreen
</UL>

<P><STRONG><a name="[102]"></a>getTemperature</STRONG> (Thumb, 230 bytes, Stack size 8 bytes, inverter.o(i.getTemperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = getTemperature &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_regular_data_read
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_flag_get
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_flag_clear
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_logf
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_rintf
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;query_settings
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startScreen()
</UL>

<P><STRONG><a name="[100]"></a>gpio_af_set</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, gd32f3x0_gpio.o(i.gpio_af_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_af_set
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_config()
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClearBusyFlagErratum()
</UL>

<P><STRONG><a name="[11c]"></a>gpio_input_bit_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f3x0_gpio.o(i.gpio_input_bit_get))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPower(signed char)
</UL>

<P><STRONG><a name="[fe]"></a>gpio_mode_set</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, gd32f3x0_gpio.o(i.gpio_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_config()
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClearBusyFlagErratum()
</UL>

<P><STRONG><a name="[116]"></a>gpio_output_bit_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f3x0_gpio.o(i.gpio_output_bit_get))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClearBusyFlagErratum()
</UL>

<P><STRONG><a name="[ff]"></a>gpio_output_options_set</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, gd32f3x0_gpio.o(i.gpio_output_options_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_output_options_set
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_config()
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClearBusyFlagErratum()
</UL>

<P><STRONG><a name="[18b]"></a>i2c_ack_config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32f3x0_i2c.o(i.i2c_ack_config))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xw09A_read_data
</UL>

<P><STRONG><a name="[18a]"></a>i2c_ackpos_config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32f3x0_i2c.o(i.i2c_ackpos_config))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xw09A_read_data
</UL>

<P><STRONG><a name="[f4]"></a>i2c_clock_config</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, gd32f3x0_i2c.o(i.i2c_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = i2c_clock_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_config()
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClearBusyFlagErratum()
</UL>

<P><STRONG><a name="[190]"></a>i2c_data_receive</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32f3x0_i2c.o(i.i2c_data_receive))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xw09A_read_data
</UL>

<P><STRONG><a name="[115]"></a>i2c_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f3x0_i2c.o(i.i2c_disable))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClearBusyFlagErratum()
</UL>

<P><STRONG><a name="[f6]"></a>i2c_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f3x0_i2c.o(i.i2c_enable))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_config()
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClearBusyFlagErratum()
</UL>

<P><STRONG><a name="[18e]"></a>i2c_flag_clear</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gd32f3x0_i2c.o(i.i2c_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xw09A_read_data
</UL>

<P><STRONG><a name="[189]"></a>i2c_flag_get</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32f3x0_i2c.o(i.i2c_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xw09A_read_data
</UL>

<P><STRONG><a name="[18d]"></a>i2c_master_addressing</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f3x0_i2c.o(i.i2c_master_addressing))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xw09A_read_data
</UL>

<P><STRONG><a name="[f5]"></a>i2c_mode_addr_config</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gd32f3x0_i2c.o(i.i2c_mode_addr_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_mode_addr_config
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_config()
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClearBusyFlagErratum()
</UL>

<P><STRONG><a name="[117]"></a>i2c_software_reset_config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f3x0_i2c.o(i.i2c_software_reset_config))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClearBusyFlagErratum()
</UL>

<P><STRONG><a name="[18c]"></a>i2c_start_on_bus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f3x0_i2c.o(i.i2c_start_on_bus))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xw09A_read_data
</UL>

<P><STRONG><a name="[18f]"></a>i2c_stop_on_bus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f3x0_i2c.o(i.i2c_stop_on_bus))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xw09A_read_data
</UL>

<P><STRONG><a name="[b0]"></a>isValidDate</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, inverter.o(i.isValidDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = isValidDate
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isLeap(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DatePlus
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DateMinus
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcceptParameter
</UL>

<P><STRONG><a name="[173]"></a>loop</STRONG> (Thumb, 2410 bytes, Stack size 40 bytes, inverter.o(i.loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = loop &rArr; MenuOK() &rArr; PrepareEditParameter &rArr; AcceptParameter &rArr; MenuBack &rArr; DrawMenu &rArr; DrawEditParameter &rArr; DrawTimeEdit() &rArr; DrawTextAligment &rArr; PixelsBase::print(short, short, char*, signed char*) &rArr; PixelsBase::printString(short, short, char*, bool, signed char*) &rArr; PixelsBase::vLine(short, short, short) &rArr; PixelsBase::fill(int, short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemTick
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_flag_get
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_flag_clear
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_alarm_callback
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_uart_int
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;query_settings
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB::RGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::setFont(const unsigned char*)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::clear()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::drawCompressedBitmap(short, short, const unsigned char*)
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::setOrientation(unsigned char)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::fillRectangle(short, short, short, short)
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32_1byte(const void*, int, unsigned)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_window_func
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTemperature
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getModeTemperature
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCalendarMode
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pixels::displayOn()
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pixels::init()
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pixels::displayOff()
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClickButton::update()
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClickButton::getLongPressed()
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClickButton::getPressed()
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::setColor(RGB)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unblocked()
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceOFF()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFlash()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMenu()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceON()
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPower(signed char)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuPrev()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuNext()
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blocked()
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuOK()
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep()
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open_window(signed char, unsigned char)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startScreen()
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyPressed()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainScreen()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAllSettings
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuBack
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawWindowOpen
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawWifi
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTextAligment
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMainScreen
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanTemperature
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6a]"></a>main</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = main &rArr; loop &rArr; MenuOK() &rArr; PrepareEditParameter &rArr; AcceptParameter &rArr; MenuBack &rArr; DrawMenu &rArr; DrawEditParameter &rArr; DrawTimeEdit() &rArr; DrawTextAligment &rArr; PixelsBase::print(short, short, char*, signed char*) &rArr; PixelsBase::printString(short, short, char*, bool, signed char*) &rArr; PixelsBase::vLine(short, short, short) &rArr; PixelsBase::fill(int, short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_backup_write_enable
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init()
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi0_init()
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_config_lcd_bl()
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_config_buzzer()
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heat_timer_config()
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_config()
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_config()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_config()
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config()
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_config()
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[10b]"></a>nvic_irq_enable</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, gd32f3x0_misc.o(i.nvic_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init()
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heat_timer_config()
</UL>

<P><STRONG><a name="[17d]"></a>nvic_priority_group_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f3x0_misc.o(i.nvic_priority_group_set))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>

<P><STRONG><a name="[da]"></a>nvic_vector_table_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f3x0_misc.o(i.nvic_vector_table_set))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[178]"></a>open_window_func</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, inverter.o(i.open_window_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = open_window_func &rArr; DrawMainScreen &rArr; DrawTextAligment &rArr; PixelsBase::print(short, short, char*, signed char*) &rArr; PixelsBase::printString(short, short, char*, bool, signed char*) &rArr; PixelsBase::vLine(short, short, short) &rArr; PixelsBase::fill(int, short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB::RGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::drawCompressedBitmap(short, short, const unsigned char*)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::fillRectangle(short, short, short, short)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::setColor(RGB)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMainScreen
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[e3]"></a>pmu_backup_write_enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f3x0_pmu.o(i.pmu_backup_write_enable))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_config()
</UL>

<P><STRONG><a name="[17a]"></a>query_settings</STRONG> (Thumb, 1040 bytes, Stack size 16 bytes, wifi.o(i.query_settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = query_settings &rArr; getTemperature &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmit_frame
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chksum8
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stream::clear()
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stream::put(unsigned char)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTemperature
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_alarm_callback
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_uart_int
</UL>

<P><STRONG><a name="[fc]"></a>rcu_adc_clock_config</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, gd32f3x0_rcu.o(i.rcu_adc_clock_config))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_config()
</UL>

<P><STRONG><a name="[171]"></a>rcu_clock_freq_get</STRONG> (Thumb, 404 bytes, Stack size 64 bytes, gd32f3x0_rcu.o(i.rcu_clock_freq_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_clock_config
</UL>

<P><STRONG><a name="[182]"></a>rcu_flag_get</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f3x0_rcu.o(i.rcu_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_osci_stab_wait
</UL>

<P><STRONG><a name="[e4]"></a>rcu_osci_on</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32f3x0_rcu.o(i.rcu_osci_on))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_config()
</UL>

<P><STRONG><a name="[e5]"></a>rcu_osci_stab_wait</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, gd32f3x0_rcu.o(i.rcu_osci_stab_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rcu_osci_stab_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_config()
</UL>

<P><STRONG><a name="[e2]"></a>rcu_periph_clock_enable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32f3x0_rcu.o(i.rcu_periph_clock_enable))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heat_timer_config()
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_config()
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_config()
</UL>

<P><STRONG><a name="[187]"></a>rcu_periph_reset_disable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32f3x0_rcu.o(i.rcu_periph_reset_disable))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
</UL>

<P><STRONG><a name="[186]"></a>rcu_periph_reset_enable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32f3x0_rcu.o(i.rcu_periph_reset_enable))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
</UL>

<P><STRONG><a name="[e6]"></a>rcu_rtc_clock_config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f3x0_rcu.o(i.rcu_rtc_clock_config))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_config()
</UL>

<P><STRONG><a name="[176]"></a>receive_uart_int</STRONG> (Thumb, 2758 bytes, Stack size 40 bytes, wifi.o(i.receive_uart_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = receive_uart_int &rArr; deviceON() &rArr; startScreen() &rArr; DrawMainScreen &rArr; DrawTextAligment &rArr; PixelsBase::print(short, short, char*, signed char*) &rArr; PixelsBase::printString(short, short, char*, bool, signed char*) &rArr; PixelsBase::vLine(short, short, short) &rArr; PixelsBase::fill(int, short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmit_frame
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chksum8
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stream::clear()
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stream::put(unsigned char)
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;query_settings
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCalendarMode
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceOFF()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceON()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTemperature
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMainScreen
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanTemperature
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[a2]"></a>reset_wifi_state</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, wifi.o(i.reset_wifi_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = reset_wifi_state &rArr; usart_transmit_frame
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmit_frame
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chksum8
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stream::clear()
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stream::put(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcceptParameter
</UL>

<P><STRONG><a name="[d5]"></a>rtc_alarm_callback</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, inverter.o(i.rtc_alarm_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rtc_alarm_callback &rArr; query_settings &rArr; getTemperature &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;query_settings
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[ce]"></a>rtc_alarm_config</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, gd32f3x0_rtc.o(i.rtc_alarm_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rtc_alarm_config
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer
</UL>

<P><STRONG><a name="[cd]"></a>rtc_alarm_disable</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, gd32f3x0_rtc.o(i.rtc_alarm_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rtc_alarm_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer
</UL>

<P><STRONG><a name="[d0]"></a>rtc_alarm_enable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f3x0_rtc.o(i.rtc_alarm_enable))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer
</UL>

<P><STRONG><a name="[af]"></a>rtc_current_time_get</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, gd32f3x0_rtc.o(i.rtc_current_time_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rtc_current_time_get
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCalendarMode
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuOK()
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareEditParameter
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawEditParameter
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcceptParameter
</UL>

<P><STRONG><a name="[d6]"></a>rtc_deinit</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, gd32f3x0_rtc.o(i.rtc_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rtc_deinit &rArr; rtc_register_sync_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_register_sync_wait
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init_mode_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAllSettings
</UL>

<P><STRONG><a name="[cf]"></a>rtc_flag_clear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f3x0_rtc.o(i.rtc_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer
</UL>

<P><STRONG><a name="[d4]"></a>rtc_flag_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f3x0_rtc.o(i.rtc_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[b2]"></a>rtc_init</STRONG> (Thumb, 150 bytes, Stack size 20 bytes, gd32f3x0_rtc.o(i.rtc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rtc_init &rArr; rtc_register_sync_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_register_sync_wait
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init_mode_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init_mode_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAllSettings
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcceptParameter
</UL>

<P><STRONG><a name="[183]"></a>rtc_init_mode_enter</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, gd32f3x0_rtc.o(i.rtc_init_mode_enter))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_deinit
</UL>

<P><STRONG><a name="[184]"></a>rtc_init_mode_exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f3x0_rtc.o(i.rtc_init_mode_exit))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
</UL>

<P><STRONG><a name="[e7]"></a>rtc_register_sync_wait</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, gd32f3x0_rtc.o(i.rtc_register_sync_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rtc_register_sync_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_config()
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_deinit
</UL>

<P><STRONG><a name="[c5]"></a>smooth_backlight</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, inverter.o(i.smooth_backlight))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = smooth_backlight
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_pulse_value_config
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceOFF()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMenu()
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuPrev()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuNext()
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuOK()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoOK(int)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startScreen()
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuBack
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMainScreen
</UL>

<P><STRONG><a name="[128]"></a>spi_dma_enable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32f3x0_spi.o(i.spi_dma_enable))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi0_init()
</UL>

<P><STRONG><a name="[129]"></a>spi_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f3x0_spi.o(i.spi_enable))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi0_init()
</UL>

<P><STRONG><a name="[127]"></a>spi_init</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, gd32f3x0_spi.o(i.spi_init))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi0_init()
</UL>

<P><STRONG><a name="[15c]"></a>spi_write_byte</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main.o(i.spi_write_byte))
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_byte
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPI16::writeData(unsigned char, unsigned char)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPI16::writeData(unsigned char)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPI16::writeCmd(unsigned char)
</UL>

<P><STRONG><a name="[17b]"></a>systick_config</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, systick.o(i.systick_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = systick_config
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[112]"></a>timer_auto_reload_shadow_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f3x0_timer.o(i.timer_auto_reload_shadow_enable))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_config_lcd_bl()
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_config_buzzer()
</UL>

<P><STRONG><a name="[10d]"></a>timer_channel_output_config</STRONG> (Thumb, 476 bytes, Stack size 12 bytes, gd32f3x0_timer.o(i.timer_channel_output_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = timer_channel_output_config
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_config_lcd_bl()
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_config_buzzer()
</UL>

<P><STRONG><a name="[10f]"></a>timer_channel_output_mode_config</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, gd32f3x0_timer.o(i.timer_channel_output_mode_config))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_config_lcd_bl()
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_config_buzzer()
</UL>

<P><STRONG><a name="[10e]"></a>timer_channel_output_pulse_value_config</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gd32f3x0_timer.o(i.timer_channel_output_pulse_value_config))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_config_lcd_bl()
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_config_buzzer()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smooth_backlight
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep()
</UL>

<P><STRONG><a name="[110]"></a>timer_channel_output_shadow_config</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, gd32f3x0_timer.o(i.timer_channel_output_shadow_config))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_config_lcd_bl()
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_config_buzzer()
</UL>

<P><STRONG><a name="[106]"></a>timer_deinit</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, gd32f3x0_timer.o(i.timer_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_config_lcd_bl()
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_config_buzzer()
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heat_timer_config()
</UL>

<P><STRONG><a name="[10a]"></a>timer_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f3x0_timer.o(i.timer_enable))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_config_lcd_bl()
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_config_buzzer()
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heat_timer_config()
</UL>

<P><STRONG><a name="[108]"></a>timer_init</STRONG> (Thumb, 136 bytes, Stack size 20 bytes, gd32f3x0_timer.o(i.timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_config_lcd_bl()
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_config_buzzer()
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heat_timer_config()
</UL>

<P><STRONG><a name="[109]"></a>timer_interrupt_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f3x0_timer.o(i.timer_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heat_timer_config()
</UL>

<P><STRONG><a name="[dc]"></a>timer_interrupt_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32f3x0_timer.o(i.timer_interrupt_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heat_timer_config()
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER13_IRQHandler
</UL>

<P><STRONG><a name="[db]"></a>timer_interrupt_flag_get</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32f3x0_timer.o(i.timer_interrupt_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER13_IRQHandler
</UL>

<P><STRONG><a name="[111]"></a>timer_primary_output_config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32f3x0_timer.o(i.timer_primary_output_config))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_config_lcd_bl()
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_config_buzzer()
</UL>

<P><STRONG><a name="[107]"></a>timer_struct_para_init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32f3x0_timer.o(i.timer_struct_para_init))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heat_timer_config()
</UL>

<P><STRONG><a name="[132]"></a>usart_baudrate_set</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, gd32f3x0_usart.o(i.usart_baudrate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init()
</UL>

<P><STRONG><a name="[df]"></a>usart_data_receive</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f3x0_usart.o(i.usart_data_receive))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[188]"></a>usart_data_transmit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f3x0_usart.o(i.usart_data_transmit))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmit_frame
</UL>

<P><STRONG><a name="[12b]"></a>usart_deinit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gd32f3x0_usart.o(i.usart_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init()
</UL>

<P><STRONG><a name="[131]"></a>usart_dma_receive_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f3x0_usart.o(i.usart_dma_receive_config))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init()
</UL>

<P><STRONG><a name="[133]"></a>usart_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f3x0_usart.o(i.usart_enable))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init()
</UL>

<P><STRONG><a name="[134]"></a>usart_flag_get</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32f3x0_usart.o(i.usart_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init()
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmit_frame
</UL>

<P><STRONG><a name="[135]"></a>usart_interrupt_enable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32f3x0_usart.o(i.usart_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init()
</UL>

<P><STRONG><a name="[e0]"></a>usart_interrupt_flag_clear</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gd32f3x0_usart.o(i.usart_interrupt_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[de]"></a>usart_interrupt_flag_get</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, gd32f3x0_usart.o(i.usart_interrupt_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_interrupt_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[12c]"></a>usart_parity_config</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32f3x0_usart.o(i.usart_parity_config))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init()
</UL>

<P><STRONG><a name="[12f]"></a>usart_receive_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f3x0_usart.o(i.usart_receive_config))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init()
</UL>

<P><STRONG><a name="[12e]"></a>usart_stop_bit_set</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32f3x0_usart.o(i.usart_stop_bit_set))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init()
</UL>

<P><STRONG><a name="[130]"></a>usart_transmit_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f3x0_usart.o(i.usart_transmit_config))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init()
</UL>

<P><STRONG><a name="[181]"></a>usart_transmit_frame</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, wifi.o(i.usart_transmit_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usart_transmit_frame
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_wifi_state
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_uart_int
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;query_settings
</UL>

<P><STRONG><a name="[12d]"></a>usart_word_length_set</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32f3x0_usart.o(i.usart_word_length_set))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init()
</UL>

<P><STRONG><a name="[15a]"></a>xw09A_read_data</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, inverter.o(i.xw09A_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = xw09A_read_data &rArr; I2C_ClearBusyFlagErratum() &rArr; i2c_clock_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop_on_bus
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start_on_bus
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_addressing
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_flag_get
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_flag_clear
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_data_receive
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ackpos_config
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ack_config
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClearBusyFlagErratum()
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClickButton::update()
</UL>

<P><STRONG><a name="[170]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTemperature
</UL>

<P><STRONG><a name="[191]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[144]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::computeColor(RGB, double)
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::drawRoundRectangleAntialiased(short, short, short, short, short, short, bool)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTemperature
</UL>

<P><STRONG><a name="[194]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[199]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[151]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::drawRoundRectangleAntialiased(short, short, short, short, short, short, bool)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTemperature
</UL>

<P><STRONG><a name="[197]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[156]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::putColor(short, short, bool, double)
</UL>

<P><STRONG><a name="[198]"></a>_dcmpeq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[145]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::computeColor(RGB, double)
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::drawRoundRectangleAntialiased(short, short, short, short, short, short, bool)
</UL>

<P><STRONG><a name="[19a]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[155]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::drawRoundRectangleAntialiased(short, short, short, short, short, short, bool)
</UL>

<P><STRONG><a name="[19b]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[14f]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::drawRoundRectangleAntialiased(short, short, short, short, short, short, bool)
</UL>

<P><STRONG><a name="[1e1]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[141]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::computeColor(RGB, double)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTemperature
</UL>

<P><STRONG><a name="[1e2]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[13f]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::computeColor(RGB, double)
</UL>

<P><STRONG><a name="[19c]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[19f]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[142]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::computeColor(RGB, double)
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::drawRoundRectangleAntialiased(short, short, short, short, short, short, bool)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTemperature
</UL>

<P><STRONG><a name="[19d]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[193]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>

<P><STRONG><a name="[196]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[140]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::computeColor(RGB, double)
</UL>

<P><STRONG><a name="[19e]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[169]"></a>_dsqrt</STRONG> (Thumb, 404 bytes, Stack size 24 bytes, dsqrt_umaal.o(x$fpl$dsqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[143]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::computeColor(RGB, double)
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::drawRoundRectangleAntialiased(short, short, short, short, short, short, bool)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTemperature
</UL>

<P><STRONG><a name="[1a0]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[153]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::drawRoundRectangleAntialiased(short, short, short, short, short, short, bool)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTemperature
</UL>

<P><STRONG><a name="[1a2]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[1a3]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
</UL>

<P><STRONG><a name="[61]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[1e3]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[1e4]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[192]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[168]"></a>_frnd</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, frnd.o(x$fpl$frnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _frnd &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_rintf
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[185]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, systick.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
</UL>

<P><STRONG><a name="[55]"></a>__sti___10_inverter_c_ffec7761</STRONG> (Thumb, 238 bytes, Stack size 8 bytes, inverter.o(i.__sti___10_inverter_c_ffec7761))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = __sti___10_inverter_c_ffec7761 &rArr; PixelsBase::PixelsBase(unsigned short, unsigned short) &rArr; PixelsBase::setColor(unsigned char, unsigned char, unsigned char) &rArr; PixelsBase::setColor(RGB)
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB::RGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelsBase::PixelsBase(unsigned short, unsigned short)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClickButton::ClickButton(unsigned char, unsigned short, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> inverter.o(.init_array)
</UL>
<P><STRONG><a name="[56]"></a>__sti___6_wifi_c_rxcount</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wifi.o(i.__sti___6_wifi_c_rxcount))
<BR>[Address Reference Count : 1]<UL><LI> wifi.o(.init_array)
</UL>
<P><STRONG><a name="[d9]"></a>system_clock_84m_irc8m</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, system_gd32f3x0.o(i.system_clock_84m_irc8m))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[82]"></a>_tm_carry</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _tm_carry
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>

<P><STRONG><a name="[1a1]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
</UL>

<P><STRONG><a name="[195]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[49]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[4a]"></a>[local to arm_exceptions_c]::__default_terminate_handler()</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = [local to arm_exceptions_c]::__default_terminate_handler() &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_exceptions_globs.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
